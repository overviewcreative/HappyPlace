<?php
/**
 * Hero Component AJAX Handlers
 * 
 * Handles AJAX requests for hero carousel functionality including:
 * - Favorite toggle
 * - Tour scheduling
 * - Share tracking
 * 
 * @package HappyPlace
 * @since 2.0.0
 */

if (!defined('ABSPATH')) {
    exit;
}

/**
 * AJAX handler for toggling favorites
 */
add_action('wp_ajax_hph_toggle_favorite', 'hph_handle_toggle_favorite');
add_action('wp_ajax_nopriv_hph_toggle_favorite', 'hph_handle_toggle_favorite');

function hph_handle_toggle_favorite() {
    // Verify nonce for security
    if (!wp_verify_nonce($_POST['nonce'], 'hph_hero_nonce')) {
        wp_die('Security check failed');
    }
    
    $listing_id = intval($_POST['listing_id']);
    
    if (!$listing_id) {
        wp_send_json_error('Invalid listing ID');
        return;
    }
    
    // Get current user ID (0 for guests)
    $user_id = get_current_user_id();
    
    if ($user_id > 0) {
        // For logged-in users, store in user meta
        $favorites = get_user_meta($user_id, 'hph_favorite_listings', true) ?: [];
        
        $is_favorite = in_array($listing_id, $favorites);
        
        if ($is_favorite) {
            // Remove from favorites
            $favorites = array_diff($favorites, [$listing_id]);
            $action = 'removed';
        } else {
            // Add to favorites
            $favorites[] = $listing_id;
            $action = 'added';
        }
        
        update_user_meta($user_id, 'hph_favorite_listings', array_unique($favorites));
        
    } else {
        // For guests, use session or cookie (implement as needed)
        // For now, just return success without persistence
        $action = 'added'; // Default for demo
    }
    
    wp_send_json_success([
        'action' => $action,
        'listing_id' => $listing_id,
        'is_favorite' => $action === 'added'
    ]);
}

/**
 * AJAX handler for scheduling a tour
 */
add_action('wp_ajax_hph_schedule_tour', 'hph_handle_schedule_tour');
add_action('wp_ajax_nopriv_hph_schedule_tour', 'hph_handle_schedule_tour');

function hph_handle_schedule_tour() {
    // Verify nonce for security
    if (!wp_verify_nonce($_POST['nonce'], 'hph_hero_nonce')) {
        wp_die('Security check failed');
    }
    
    $listing_id = intval($_POST['listing_id']);
    
    if (!$listing_id) {
        wp_send_json_error('Invalid listing ID');
        return;
    }
    
    // For now, just return success - implement actual tour scheduling logic
    // This could integrate with a calendar system, send emails, etc.
    
    wp_send_json_success([
        'message' => 'Tour scheduling request received',
        'listing_id' => $listing_id
    ]);
}

/**
 * AJAX handler for tracking social shares
 */
add_action('wp_ajax_hph_track_share', 'hph_handle_track_share');
add_action('wp_ajax_nopriv_hph_track_share', 'hph_handle_track_share');

function hph_handle_track_share() {
    // Verify nonce for security
    if (!wp_verify_nonce($_POST['nonce'], 'hph_hero_nonce')) {
        wp_die('Security check failed');
    }
    
    $listing_id = intval($_POST['listing_id']);
    $share_type = sanitize_text_field($_POST['share_type'] ?? 'web_share');
    
    if (!$listing_id) {
        wp_send_json_error('Invalid listing ID');
        return;
    }
    
    // Track the share event - could be stored in custom table, meta, or analytics
    $share_count = get_post_meta($listing_id, '_hph_share_count', true) ?: 0;
    update_post_meta($listing_id, '_hph_share_count', $share_count + 1);
    
    // Track share types
    $share_types = get_post_meta($listing_id, '_hph_share_types', true) ?: [];
    $share_types[$share_type] = ($share_types[$share_type] ?? 0) + 1;
    update_post_meta($listing_id, '_hph_share_types', $share_types);
    
    wp_send_json_success([
        'message' => 'Share tracked successfully',
        'total_shares' => $share_count + 1
    ]);
}
