/*
 * Mixins - Reusable SCSS patterns
 * Happy Place Theme v2.0
 */

/* ============================================
   RESPONSIVE BREAKPOINTS
   ============================================ */
$breakpoints: (
    'xs': 320px,
    'sm': 640px,
    'md': 768px,
    'lg': 1024px,
    'xl': 1280px,
    '2xl': 1536px
);

@mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media screen and (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

@mixin respond-between($min, $max) {
    @if map-has-key($breakpoints, $min) and map-has-key($breakpoints, $max) {
        @media screen and (min-width: map-get($breakpoints, $min)) and (max-width: #{map-get($breakpoints, $max) - 1px}) {
            @content;
        }
    }
}

@mixin respond-to-max($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media screen and (max-width: #{map-get($breakpoints, $breakpoint) - 1px}) {
            @content;
        }
    }
}

// Dashboard specific mobile breakpoint
@mixin dashboard-mobile {
    @media screen and (width <= 767px) {
        @content;
    }
}

// Dashboard specific tablet breakpoint
@mixin dashboard-tablet {
    @media screen and (width >= 768px) and (width <= 1023px) {
        @content;
    }
}

// Dashboard specific desktop breakpoint
@mixin dashboard-desktop {
    @media screen and (width >= 1024px) {
        @content;
    }
}

// Dashboard print hidden
@mixin dashboard-print-hidden {
    @media print {
        display: none !important;
    }
}

// Focus ring for accessibility
@mixin focus-ring {
    outline: 2px solid var(--color-primary, #0073aa);
    outline-offset: 2px;
}

// Text truncation
@mixin truncate {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Dashboard card styling
@mixin dashboard-card {
    background: var(--dashboard-surface, #fff);
    border-radius: var(--card-border-radius, 8px);
    box-shadow: var(--card-shadow, 0 1px 3px rgb(0 0 0 / 10%));
    padding: var(--card-padding, 1.5rem);
}

// Dashboard grid layout
@mixin dashboard-grid($min-column-width: 300px) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax($min-column-width, 1fr));
    gap: var(--dashboard-spacing-md, 1rem);
}

// Shimmer loading effect
@mixin shimmer {
    background: linear-gradient(90deg, 
        rgb(255 255 255 / 0%) 0%, 
        rgb(255 255 255 / 20%) 20%, 
        rgb(255 255 255 / 50%) 60%, 
        rgb(255 255 255 / 0%)
    );
    background-size: 200px 100%;
    background-repeat: no-repeat;
    animation: shimmer 2s infinite;
}

@keyframes shimmer {
    0% {
        background-position: -200px 0;
    }

    100% {
        background-position: calc(200px + 100%) 0;
    }
}

// Dashboard button state styling
@mixin dashboard-button-state($theme: 'primary') {
    @if $theme == 'hph-primary' or $theme == 'primary' {
        background: var(--hph-primary-600);
        color: white;
        border: 1px solid var(--hph-primary-600);
        
        &:hover {
            background: var(--hph-primary-700);
            border-color: var(--hph-primary-700);
        }
        
        &:focus {
            @include focus-ring;
            background: var(--hph-primary-700);
        }
        
        &:active {
            background: var(--hph-primary-800);
            border-color: var(--hph-primary-800);
        }
    } @else if $theme == 'secondary' {
        background: white;
        color: var(--dashboard-text);
        border: 1px solid var(--dashboard-border);
        
        &:hover {
            background: var(--color-gray-50);
            border-color: var(--dashboard-text-muted);
        }
        
        &:focus {
            @include focus-ring;
        }
    }
}

// Spinner/loading animation
@mixin spinner($size: 24px, $color: var(--dashboard-primary)) {
  display: inline-block;
  width: $size;
  height: $size;
  border: 3px solid rgba(#{$color}, 0.3);
  border-radius: 50%;
  border-top: 3px solid #{$color};
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* ============================================
   COMPONENT MIXINS
   ============================================ */

// Card component mixin
@mixin card($variant: 'default') {
    background: white;
    border-radius: var(--card-border-radius);
    box-shadow: var(--card-shadow);
    overflow: hidden;
    transition: var(--transition-shadow);
    
    @if $variant == 'hover' {
        &:hover {
            box-shadow: var(--card-shadow-hover);
            transform: translateY(-2px);
        }
    }
    
    @if $variant == 'interactive' {
        cursor: pointer;
        transition: var(--transition-shadow), var(--transition-transform);
        
        &:hover {
            box-shadow: var(--card-shadow-hover);
            transform: translateY(-2px);
        }
        
        &:focus {
            outline: none;
            box-shadow: var(--card-shadow-focus);
        }
    }
}

// Button component mixin
@mixin button($variant: 'primary', $size: 'md') {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border: none;
    border-radius: var(--button-border-radius);
    font-family: var(--font-family-primary);
    font-weight: var(--font-weight-medium);
    text-decoration: none;
    cursor: pointer;
    transition: var(--transition-colors);
    
    // Size variants
    @if $size == 'sm' {
        height: var(--button-height-sm);
        padding: 0 var(--spacing-3);
        font-size: var(--font-size-sm);
    } @else if $size == 'md' {
        height: var(--button-height-md);
        padding: 0 var(--spacing-4);
        font-size: var(--font-size-base);
    } @else if $size == 'lg' {
        height: var(--button-height-lg);
        padding: 0 var(--spacing-6);
        font-size: var(--font-size-lg);
    }
    
    // Color variants
    @if $variant == 'primary' {
        background-color: var(--hph-primary-400);
        color: white;
        
        &:hover:not(:disabled) {
            background-color: var(--hph-primary-500);
        }
        
        &:focus {
            box-shadow: 0 0 0 3px rgb(81 186 224 / 20%);
        }
    } @else if $variant == 'secondary' {
        background-color: var(--color-gray-100);
        color: var(--color-gray-900);
        
        &:hover:not(:disabled) {
            background-color: var(--color-gray-200);
        }
    } @else if $variant == 'outline' {
        background-color: transparent;
        color: var(--hph-primary-400);
        border: 1px solid var(--hph-primary-400);
        
        &:hover:not(:disabled) {
            background-color: var(--hph-primary-400);
            color: white;
        }
    }
    
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
}

// Form field mixin
@mixin form-field() {
    display: block;
    width: 100%;
    height: var(--form-field-height);
    padding: 0 var(--spacing-3);
    background-color: white;
    border: var(--form-field-border);
    border-radius: var(--form-field-border-radius);
    font-family: var(--font-family-primary);
    font-size: var(--font-size-base);
    transition: var(--transition-colors);
    
    &:focus {
        outline: none;
        border: var(--form-field-border-focus);
    }
    
    &::placeholder {
        color: var(--color-gray-400);
    }
    
    &:disabled {
        background-color: var(--color-gray-50);
        cursor: not-allowed;
    }
}

// Container mixin
@mixin container($max-width: null) {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    padding-left: var(--container-padding-mobile);
    padding-right: var(--container-padding-mobile);
    
    @include respond-to('md') {
        padding-left: var(--container-padding-tablet);
        padding-right: var(--container-padding-tablet);
    }
    
    @include respond-to('lg') {
        padding-left: var(--container-padding-desktop);
        padding-right: var(--container-padding-desktop);
    }
    
    @if $max-width {
        max-width: $max-width;
    } @else {
        max-width: var(--container-max-width);
    }
}

// Grid system mixin
@mixin grid($columns: 1, $gap: var(--grid-gap-md)) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    gap: $gap;
}

@mixin auto-grid($min-column-width: 250px, $gap: var(--grid-gap-md)) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax($min-column-width, 1fr));
    gap: $gap;
}

// Flex utilities
@mixin flex-center() {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-between() {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

@mixin flex-column() {
    display: flex;
    flex-direction: column;
}

/* ============================================
   TYPOGRAPHY MIXINS
   ============================================ */

@mixin heading($level: 1) {
    font-family: var(--font-family-primary);
    font-weight: var(--font-weight-bold);
    line-height: var(--line-height-tight);
    color: var(--color-gray-900);
    
    @if $level == 1 {
        font-size: var(--font-size-4xl);

        @include respond-to('md') {
            font-size: var(--font-size-5xl);
        }
    } @else if $level == 2 {
        font-size: var(--font-size-3xl);

        @include respond-to('md') {
            font-size: var(--font-size-4xl);
        }
    } @else if $level == 3 {
        font-size: var(--font-size-2xl);

        @include respond-to('md') {
            font-size: var(--font-size-3xl);
        }
    } @else if $level == 4 {
        font-size: var(--font-size-xl);

        @include respond-to('md') {
            font-size: var(--font-size-2xl);
        }
    } @else if $level == 5 {
        font-size: var(--font-size-lg);

        @include respond-to('md') {
            font-size: var(--font-size-xl);
        }
    } @else if $level == 6 {
        font-size: var(--font-size-base);

        @include respond-to('md') {
            font-size: var(--font-size-lg);
        }
    }
}

@mixin body-text($size: 'base') {
    font-family: var(--font-family-primary);
    font-weight: var(--font-weight-normal);
    line-height: var(--line-height-normal);
    color: var(--color-gray-700);
    
    @if $size == 'sm' {
        font-size: var(--font-size-sm);
    } @else if $size == 'base' {
        font-size: var(--font-size-base);
    } @else if $size == 'lg' {
        font-size: var(--font-size-lg);
    }
}

@mixin text-truncate() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin text-truncate-lines($lines: 2) {
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
}

/* ============================================
   UTILITY MIXINS
   ============================================ */

// Screen reader only
@mixin sr-only() {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

// Focus outline
@mixin focus-outline($color: var(--hph-primary-400)) {
    outline: 2px solid $color;
    outline-offset: 2px;
}

// Hover lift effect
@mixin hover-lift($distance: 4px) {
    transition: var(--transition-transform), var(--transition-shadow);
    
    &:hover {
        transform: translateY(-#{$distance});
        box-shadow: var(--shadow-lg);
    }
}

// Aspect ratio
@mixin aspect-ratio($ratio: 16/9) {
    position: relative;
    
    &::before {
        content: '';
        display: block;
        padding-bottom: percentage(1 / $ratio);
    }
    
    > * {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
}

// Clearfix
@mixin clearfix() {
    &::after {
        content: '';
        display: table;
        clear: both;
    }
}

// Safe area insets (for mobile devices with notches)
@mixin safe-area-inset($property: padding, $sides: all) {
    @if $sides == all {
        #{$property}: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
    } @else if $sides == top {
        #{$property}-top: env(safe-area-inset-top);
    } @else if $sides == right {
        #{$property}-right: env(safe-area-inset-right);
    } @else if $sides == bottom {
        #{$property}-bottom: env(safe-area-inset-bottom);
    } @else if $sides == left {
        #{$property}-left: env(safe-area-inset-left);
    }
}

/* ============================================
   COMPREHENSIVE COMPONENT MIXINS
   ============================================ */

// Responsive helpers with cleaner names
@mixin respond-below($breakpoint) {
    @include respond-to-max($breakpoint) {
        @content;
    }
}

@mixin respond-above($breakpoint) {
    @include respond-to($breakpoint) {
        @content;
    }
}

// Modern component mixins
@mixin card-base {
    background: var(--color-white);
    border-radius: var(--hph-border-radius-xl);
    box-shadow: var(--hph-shadow-base);
    overflow: hidden;
    transition: var(--transition-all);
}

@mixin card-hover {
    &:hover {
        transform: translateY(-2px);
        box-shadow: var(--hph-shadow-lg);
    }
}

@mixin button-base {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--hph-spacing-2);
    padding: var(--hph-spacing-3) var(--hph-spacing-6);
    border: none;
    border-radius: var(--hph-border-radius-lg);
    font-family: var(--font-family-primary);
    font-size: var(--hph-font-size-base);
    font-weight: var(--font-weight-medium);
    line-height: var(--line-height-tight);
    text-decoration: none;
    cursor: pointer;
    transition: var(--transition-all);
    
    &:focus {
        outline: 2px solid var(--color-primary);
        outline-offset: 2px;
    }
    
    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
}

@mixin button-primary {
    @include button-base;
    background: var(--color-primary);
    color: var(--color-white);
    
    &:hover:not(:disabled) {
        background: var(--color-primary-dark);
        transform: translateY(-1px);
        box-shadow: var(--hph-shadow-md);
    }
}

@mixin button-secondary {
    @include button-base;
    background: var(--color-white);
    color: var(--color-primary);
    border: 1px solid var(--color-border);
    
    &:hover:not(:disabled) {
        background: var(--color-primary-light);
        border-color: var(--color-primary);
    }
}

@mixin button-outline {
    @include button-base;
    background: transparent;
    color: var(--color-primary);
    border: 1px solid var(--color-primary);
    
    &:hover:not(:disabled) {
        background: var(--color-primary);
        color: var(--color-white);
    }
}

@mixin form-input {
    width: 100%;
    padding: var(--hph-spacing-3) var(--hph-spacing-4);
    border: 1px solid var(--color-border);
    border-radius: var(--hph-border-radius-lg);
    font-family: var(--font-family-primary);
    font-size: var(--hph-font-size-base);
    line-height: var(--line-height-normal);
    transition: var(--hph-transition-fast);
    
    &:focus {
        outline: none;
        border-color: var(--color-primary);
        box-shadow: 0 0 0 3px var(--color-primary-light);
    }
    
    &::placeholder {
        color: var(--color-text-muted);
    }
}

@mixin sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

@mixin aspect-ratio($ratio: 16/9) {
    aspect-ratio: $ratio;
    
    @supports not (aspect-ratio: 1) {
        position: relative;
        
        &::before {
            content: '';
            display: block;
            width: 100%;
            padding-bottom: percentage(1 / $ratio);
        }
        
        > * {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
    }
}

// Animation mixins
@mixin fade-in($duration: var(--transition-normal)) {
    animation: fade-in $duration ease-out;
}

@mixin slide-up($duration: var(--transition-normal)) {
    animation: slide-up $duration ease-out;
}

@mixin scale-in($duration: var(--transition-fast)) {
    animation: scale-in $duration ease-out;
}

// Utility mixins
@mixin center-absolute {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin overlay {
    position: absolute;
    inset: 0;
}

// Keyframes for animations
@keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slide-up {
    from {
        opacity: 0;
        transform: translateY(1rem);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes scale-in {
    from {
        opacity: 0;
        transform: scale(0.95);
    }

    to {
        opacity: 1;
        transform: scale(1);
    }
}
