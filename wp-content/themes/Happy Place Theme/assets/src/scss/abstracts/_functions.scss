/*
 * Functions - SCSS helper functions
 * Happy Place Theme v2.0
 */

/* ============================================
   SPACING FUNCTIONS
   ============================================ */

// Convert spacing value to rem
@function spacing($value) {
    @return $value * 0.25rem; // $value * 4px converted to rem
}

// Get spacing value from map
$spacing-values: (
    0: 0,
    px: 1px,
    0.5: 0.125rem,
    1: 0.25rem,
    1.5: 0.375rem,
    2: 0.5rem,
    2.5: 0.625rem,
    3: 0.75rem,
    3.5: 0.875rem,
    4: 1rem,
    5: 1.25rem,
    6: 1.5rem,
    7: 1.75rem,
    8: 2rem,
    9: 2.25rem,
    10: 2.5rem,
    11: 2.75rem,
    12: 3rem,
    14: 3.5rem,
    16: 4rem,
    20: 5rem,
    24: 6rem,
    28: 7rem,
    32: 8rem,
    36: 9rem,
    40: 10rem,
    44: 11rem,
    48: 12rem,
    52: 13rem,
    56: 14rem,
    60: 15rem,
    64: 16rem,
    72: 18rem,
    80: 20rem,
    96: 24rem
);

@function space($key) {
    @return map-get($spacing-values, $key);
}

/* ============================================
   COLOR FUNCTIONS
   ============================================ */

// Lighten a color by a percentage
@function lighten-color($color, $percentage) {
    @return lighten($color, $percentage);
}

// Darken a color by a percentage
@function darken-color($color, $percentage) {
    @return darken($color, $percentage);
}

// Create a color with opacity
@function alpha($color, $opacity) {
    @return rgba($color, $opacity);
}

// Get theme color from palette
$theme-colors: (
    'primary': #51bae0,
    'success': #10b981,
    'warning': #f59e0b,
    'error': #ef4444,
    'gray-50': #f9fafb,
    'gray-100': #f3f4f6,
    'gray-200': #e5e7eb,
    'gray-300': #d1d5db,
    'gray-400': #9ca3af,
    'gray-500': #6b7280,
    'gray-600': #4b5563,
    'gray-700': #374151,
    'gray-800': #1f2937,
    'gray-900': #111827
);

@function theme-color($color-name) {
    @return map-get($theme-colors, $color-name);
}

/* ============================================
   TYPOGRAPHY FUNCTIONS
   ============================================ */

// Font size scale
$font-sizes: (
    'xs': 0.75rem,
    'sm': 0.875rem,
    'base': 1rem,
    'lg': 1.125rem,
    'xl': 1.25rem,
    '2xl': 1.5rem,
    '3xl': 1.875rem,
    '4xl': 2.25rem,
    '5xl': 3rem,
    '6xl': 3.75rem,
    '7xl': 4.5rem
);

@function font-size($size) {
    @return map-get($font-sizes, $size);
}

// Line height scale
$line-heights: (
    'none': 1,
    'tight': 1.25,
    'snug': 1.375,
    'normal': 1.5,
    'relaxed': 1.625,
    'loose': 2
);

@function line-height($height) {
    @return map-get($line-heights, $height);
}

/* ============================================
   SHADOW FUNCTIONS
   ============================================ */

$shadows: (
    'xs': (0 1px 2px 0 rgb(0 0 0 / 5%)),
    'sm': (0 1px 3px 0 rgb(0 0 0 / 10%), 0 1px 2px -1px rgb(0 0 0 / 10%)),
    'base': (0 4px 6px -1px rgb(0 0 0 / 10%), 0 2px 4px -2px rgb(0 0 0 / 10%)),
    'md': (0 10px 15px -3px rgb(0 0 0 / 10%), 0 4px 6px -4px rgb(0 0 0 / 10%)),
    'lg': (0 20px 25px -5px rgb(0 0 0 / 10%), 0 8px 10px -6px rgb(0 0 0 / 10%)),
    'xl': (0 25px 50px -12px rgb(0 0 0 / 25%)),
    '2xl': (0 25px 50px -12px rgb(0 0 0 / 25%)),
    'inner': (inset 0 2px 4px 0 rgb(0 0 0 / 5%))
);

@function shadow($size) {
    @return map-get($shadows, $size);
}

/* ============================================
   LAYOUT FUNCTIONS
   ============================================ */

// Container max widths
$container-max-widths: (
    'sm': 40rem,    // 640px
    'md': 48rem,    // 768px
    'lg': 64rem,    // 1024px
    'xl': 80rem,    // 1280px
    '2xl': 96rem,   // 1536px
    'full': 75rem   // 1200px - default
);

@function container-width($size: 'full') {
    @return map-get($container-max-widths, $size);
}

/* ============================================
   UTILITY FUNCTIONS
   ============================================ */

// Remove unit from a number
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

// Convert px to rem
@function px-to-rem($px, $base-font-size: 16px) {
    @return (strip-unit($px) / strip-unit($base-font-size)) * 1rem;
}

// Convert rem to px
@function rem-to-px($rem, $base-font-size: 16px) {
    @return strip-unit($rem) * strip-unit($base-font-size) * 1px;
}

// Calculate fluid typography
@function fluid-type($min-size, $max-size, $min-screen: 320px, $max-screen: 1200px) {
    $min-size: strip-unit($min-size);
    $max-size: strip-unit($max-size);
    $min-screen: strip-unit($min-screen);
    $max-screen: strip-unit($max-screen);
    
    @return calc(#{$min-size}px + #{$max-size - $min-size} * ((100vw - #{$min-screen}px) / #{$max-screen - $min-screen}));
}

// Z-index management
$z-index: (
    'auto': auto,
    '0': 0,
    '10': 10,
    '20': 20,
    '30': 30,
    '40': 40,
    '50': 50,
    'dropdown': 1000,
    'sticky': 1020,
    'fixed': 1030,
    'modal-backdrop': 1040,
    'modal': 1050,
    'popover': 1060,
    'tooltip': 1070,
    'toast': 1080,
    'notification': 1090
);

@function z($layer) {
    @return map-get($z-index, $layer);
}

/* ============================================
   COMPONENT FUNCTIONS
   ============================================ */

// Grid column span calculator
@function span($columns, $total-columns: 12) {
    @return percentage($columns / $total-columns);
}

// Aspect ratio calculator
@function aspect-ratio($width, $height) {
    @return percentage($height / $width);
}

// Generate component variant classes
@function variant-class($component, $variant) {
    @return '#{$component}--#{$variant}';
}

// Generate responsive class names
@function responsive-class($property, $breakpoint, $value) {
    @return '#{$breakpoint}\\:#{$property}-#{$value}';
}

/* ============================================
   COMPREHENSIVE UTILITY FUNCTIONS
   ============================================ */

// Convert px to rem with base
@function rem($pixels, $base: 16) {
    @return #{$pixels / $base}rem;
}

// Convert px to em
@function em($pixels, $base: 16) {
    @return #{$pixels / $base}em;
}

// Strip units from values
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

// Calculate fluid typography
@function fluid-size($min-size, $max-size, $min-screen: 320px, $max-screen: 1200px) {
    $slope: ($max-size - $min-size) / ($max-screen - $min-screen);
    $yAxisIntersection: -$min-screen * $slope + $min-size;

    @return clamp(#{$min-size}, #{$yAxisIntersection} + #{$slope * 100vw}, #{$max-size});
}

// Map deep get for nested maps
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }

    @return $map;
}

// Color contrast calculation
@function luminance($color) {
    $red: red($color);
    $green: green($color);
    $blue: blue($color);
    
    @if $red <= 10 {
        $red: $red / 3294;
    } @else {
        $red: pow(($red + 14) / 269, 2.4);
    }
    
    @if $green <= 10 {
        $green: $green / 3294;
    } @else {
        $green: pow(($green + 14) / 269, 2.4);
    }
    
    @if $blue <= 10 {
        $blue: $blue / 3294;
    } @else {
        $blue: pow(($blue + 14) / 269, 2.4);
    }
    
    @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

@function contrast($color1, $color2) {
    $luminance1: luminance($color1) + 0.05;
    $luminance2: luminance($color2) + 0.05;
    $ratio: $luminance1 / $luminance2;
    
    @if $luminance2 > $luminance1 {
        $ratio: 1 / $ratio;
    }
    
    @return $ratio;
}

// Power function (for luminance calculation)
@function pow($base, $exponent) {
    $result: 1;

    @for $i from 1 through $exponent {
        $result: $result * $base;
    }

    @return $result;
}
